name: CI

on:
  push:
    branches: [ "dev", "main", "tests", "ci" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: macos-12

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Default Scheme
        run: |
          cd ./flowers/flowers
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default_scheme=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo "$default_scheme" > default_scheme.txt
          echo "Using default scheme: $default_scheme"
      - name: Test
        run: |
          cd ./flowers/flowers
          device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          echo "Using device: $device"
          if [ -f "default_scheme.txt" ]; then
            scheme=$(cat default_scheme.txt)
          else
            echo "Error: Default scheme file not found."
            exit 1
          fi
          if [ -z "$scheme" ]; then
            echo "Error: No scheme provided."
            exit 1
          fi
          if [ "$(ls -A | grep -i \\.xcworkspace\$)" ]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \\.xcworkspace\$)"
          else
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \\.xcodeproj\$)"
          fi
          file_to_build=$(echo "$file_to_build" | awk '{$1=$1;print}')
          echo "File to build: $file_to_build"
          xcodebuild test -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=iOS Simulator,name=$device" -enableCodeCoverage YES || true

  build:
    runs-on: macos-12
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Default Scheme
        run: |
          cd ./flowers/flowers
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default_scheme=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo "$default_scheme" > default_scheme.txt
          echo "Using default scheme: $default_scheme"
      - name: Build
        run: |
          cd ./flowers/flowers
          device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          echo "Using device: $device"
          if [ -f "default_scheme.txt" ]; then
            scheme=$(cat default_scheme.txt)
          else
            echo "Error: Default scheme file not found."
            exit 1
          fi
          if [ -z "$scheme" ]; then
            echo "Error: No scheme provided."
            exit 1
          fi
          if [ "$(ls -A | grep -i \\.xcworkspace\$)" ]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \\.xcworkspace\$)"
          else
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \\.xcodeproj\$)"
          fi
          file_to_build=$(echo "$file_to_build" | awk '{$1=$1;print}')
          echo "File to build: $file_to_build"
          xcodebuild build -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=iOS Simulator,name=$device" || true
